//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringSuperposition\",\"Name\":\"GenerateRandomBit\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\gargp\\\\OneDrive\\\\Documents\\\\Github\\\\GettingStartedWithQuantum\\\\ExploringSuperposition\\\\Program.qs\",\"Position\":{\"Item1\":14,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"Result\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringSuperposition\",\"Name\":\"GenerateRandomBit\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\gargp\\\\OneDrive\\\\Documents\\\\Github\\\\GettingStartedWithQuantum\\\\ExploringSuperposition\\\\Program.qs\",\"Position\":{\"Item1\":14,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringSuperposition\",\"Name\":\"GenerateSpecificState\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\gargp\\\\OneDrive\\\\Documents\\\\Github\\\\GettingStartedWithQuantum\\\\ExploringSuperposition\\\\Program.qs\",\"Position\":{\"Item1\":39,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"alpha\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":38}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Double\"},\"ReturnType\":{\"Case\":\"Result\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringSuperposition\",\"Name\":\"GenerateSpecificState\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\gargp\\\\OneDrive\\\\Documents\\\\Github\\\\GettingStartedWithQuantum\\\\ExploringSuperposition\\\\Program.qs\",\"Position\":{\"Item1\":39,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringSuperposition\",\"Name\":\"GenerateRandomNumber\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":51,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\gargp\\\\OneDrive\\\\Documents\\\\Github\\\\GettingStartedWithQuantum\\\\ExploringSuperposition\\\\Program.qs\",\"Position\":{\"Item1\":52,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringSuperposition\",\"Name\":\"GenerateRandomNumber\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\gargp\\\\OneDrive\\\\Documents\\\\Github\\\\GettingStartedWithQuantum\\\\ExploringSuperposition\\\\Program.qs\",\"Position\":{\"Item1\":52,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
#line hidden
namespace ExploringSuperposition
{
    [SourceLocation("C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs", OperationFunctor.Body, 15, 40)]
    public partial class GenerateRandomBit : Operation<QVoid, Result>, ICallable
    {
        public GenerateRandomBit(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "GenerateRandomBit";
        String ICallable.FullName => "ExploringSuperposition.GenerateRandomBit";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Diagnostics__DumpMachine
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> M__
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        public override Func<QVoid, Result> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 16 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                var q = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 17 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("Initialized qubit:");
#line 18 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 19 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply(" ");
#line 20 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(q);
#line 21 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("Qubit after applying H:");
#line 22 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 23 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply(" ");
#line 24 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    var randomBit = M__.Apply(q);
#line 25 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("Qubit after the measurement:");
#line 26 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 27 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply(" ");
#line 28 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Reset__.Apply(q);
#line 29 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("Qubit after resetting:");
#line 30 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 31 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply(" ");
#line 32 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    return randomBit;
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(q);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__Diagnostics__DumpMachine = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.M__ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(Result data) => new QTuple<Result>(data);
        public static System.Threading.Tasks.Task<Result> Run(IOperationFactory __m__)
        {
            return __m__.Run<GenerateRandomBit, QVoid, Result>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs", OperationFunctor.Body, 40, 53)]
    public partial class GenerateSpecificState : Operation<Double, Result>, ICallable
    {
        public GenerateSpecificState(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "GenerateSpecificState";
        String ICallable.FullName => "ExploringSuperposition.GenerateSpecificState";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Ry
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__ArcCos
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sqrt
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Diagnostics__DumpMachine
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> M__
        {
            get;
            set;
        }

        public override Func<Double, Result> __Body__ => (__in__) =>
        {
            var alpha = __in__;
#line hidden
            {
#line 41 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                var q = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 42 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Intrinsic__Ry.Apply(((2D * Microsoft__Quantum__Math__ArcCos.Apply(Microsoft__Quantum__Math__Sqrt.Apply(alpha))), q));
#line 43 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("The qubit is in the desired state");
#line 44 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("");
#line 45 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 46 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("");
#line 47 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("Skewed random bit is : ");
#line 48 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    return M__.Apply(q);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(q);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__Ry = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Ry));
            this.Microsoft__Quantum__Math__ArcCos = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.ArcCos));
            this.Microsoft__Quantum__Math__Sqrt = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sqrt));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__Diagnostics__DumpMachine = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.M__ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
        }

        public override IApplyData __DataIn__(Double data) => new QTuple<Double>(data);
        public override IApplyData __DataOut__(Result data) => new QTuple<Result>(data);
        public static System.Threading.Tasks.Task<Result> Run(IOperationFactory __m__, Double alpha)
        {
            return __m__.Run<GenerateSpecificState, Double, Result>(alpha);
        }
    }

    [SourceLocation("C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs", OperationFunctor.Body, 53, -1)]
    public partial class GenerateRandomNumber : Operation<QVoid, Int64>, ICallable
    {
        public GenerateRandomNumber(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "GenerateRandomNumber";
        String ICallable.FullName => "ExploringSuperposition.GenerateRandomNumber";
        public static EntryPointInfo<QVoid, Int64> Info => new EntryPointInfo<QVoid, Int64>(typeof(GenerateRandomNumber));
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Diagnostics__DumpMachine
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__ForEach
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> M__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Boolean>, Int64> Microsoft__Quantum__Convert__BoolArrayAsInt
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, IQArray<Boolean>> Microsoft__Quantum__Convert__ResultArrayAsBoolArray
        {
            get;
            set;
        }

        public override Func<QVoid, Int64> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 54 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                var qubits = Allocate__.Apply(3L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 55 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qubits));
#line 56 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("The qubit register in a uniform superposition:");
#line 57 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 58 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    var result = (IQArray<Result>)Microsoft__Quantum__Arrays__ForEach.Apply<IQArray<Result>>((M__, qubits));
#line 59 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Message__.Apply("Measuring the qubits collapses the superposition to a basis state.");
#line 60 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 61 "C:\\Users\\gargp\\OneDrive\\Documents\\Github\\GettingStartedWithQuantum\\ExploringSuperposition\\Program.qs"
                    return Microsoft__Quantum__Convert__BoolArrayAsInt.Apply(Microsoft__Quantum__Convert__ResultArrayAsBoolArray.Apply(result));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__Diagnostics__DumpMachine = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.Microsoft__Quantum__Arrays__ForEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ForEach<,>));
            this.M__ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Microsoft__Quantum__Convert__BoolArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Boolean>, Int64>>(typeof(global::Microsoft.Quantum.Convert.BoolArrayAsInt));
            this.Microsoft__Quantum__Convert__ResultArrayAsBoolArray = this.__Factory__.Get<ICallable<IQArray<Result>, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsBoolArray));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__)
        {
            return __m__.Run<GenerateRandomNumber, QVoid, Int64>(QVoid.Instance);
        }
    }
}